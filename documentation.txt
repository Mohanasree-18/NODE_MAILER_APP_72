YOU SHOULD ENTER VALID EMAIL ADDRESS IN THE APP AND THEN TYPE SOME MESSAGE AND THE HIT SEND NOW YOU CAN SEE MESSAGE FROM "NODE MAILER APP" IN THAT GMAIL ACCOUNT
*TO RUN THIS <NPM RUN SERVER> IN SMALL LETTERS

                    <FILES AND FOLDERS SETUP>
1.create public folder which will store our assets,html and some FILES
2.create views folder for ejs codes
3.create utils folder this consits of main logic
4.now create server.js file in views folder and then open terminal
5.initialise your project
6.install required dependencies <npm i express nodemailer ejs>
7.npm i nodemon -D
8.lets configure package.json file
    change main to server.js and sin scripts 
    "server": "nodemon server.js" include this
9.write code into server.js file
10.now html file wil be saved as .ejs in views
11.now go to server.js file and here we are now going to render this ejs names html file

*<public> folder
1.create file for css style.css
2.write code into it save it 
3.open localhost:9000 on browser now you can see nodemailer app with correct css

*<utils> folder
1.create sendEnail.js file
2.inport node mailer package in this file
3.write code into 
4.create transport logic
    Transporter is an object that is going to specify the email providers SMTP
    and it conatins other configurations like host post and secured in our login credentials
In host we can use any provider but here we are using gmail so use "smtp" protocal
5.In code you have to give your gmail adress anda pass key

    this passkey can be generated in following way
    go to your google account and turn on 2 step verification
    login 
    scroll down 
    tap on app passwords
    enter any name like nodemailerapp
    generate pass key
    now open code and paste it there
 
*<SENDEMAIL.JS> FILE IN UTILS EXPLANATION

 This code defines an asynchronous function `sendEmail` in Node.js that allows you to send emails using the `nodemailer` module. Here's a breakdown of the key concepts and syntax:

**Importing a Module:**

- `const nodemailer = require("nodemailer");`: This line imports the `nodemailer` module, which provides functionalities for sending emails. The `require` statement is used to import modules in Node.js.

**Asynchronous Function:**

- `const sendEmail = async (to, messageContent) => { ... }`: This defines an asynchronous function named `sendEmail`. The `async` keyword indicates that the function can perform actions that take time (like sending emails) without blocking the main thread. The function takes two arguments:
    - `to`: The email address of the recipient.
    - `messageContent`: The content of the message to be sent.

**Error Handling:**

- `try...catch` block: The function is wrapped in a `try...catch` block. This is a common syntax for handling potential errors during code execution.
    - `try`: The code inside the `try` block is executed first.
    - `catch`: If an error occurs within the `try` block, the code inside the `catch` block is executed, handling the error.

**Creating a Transporter:**

- `const transporter = nodemailer.createTransport({ ... });`: This line creates a transporter object using `nodemailer.createTransport`. The transporter object is used to configure the email sending process. The configuration options within the curly braces specify details like the SMTP server address, port, security settings, and authentication credentials.

**Message Object:**

- `const message = { ... };`: This block defines a JavaScript object that represents the email message. It includes properties like:
    - `to`: The recipient's email address.
    - `subject`: The subject line of the email.
    - `html`: The email body content in HTML format (using template literals for embedding dynamic content).

**Sending the Email:**

- `const info = await transporter.sendMail(message);`: This line attempts to send the email using the configured transporter and the defined message object.
    - `transporter.sendMail` is an asynchronous function, so `await` is used to pause the execution of the code until the email sending is complete.
    - The result of sending the email is stored in the `info` constant, which might contain information about the sent email (e.g., message ID).

**Logging and Error Throwing:**

- `console.log("Message sent", info.messageId);`: If the email is sent successfully, this line logs a message to the console indicating success along with the message ID.
- `throw new Error("Email could not be sent");`: If an error occurs during sending, a new error object with the message "Email could not be sent" is thrown using `throw`. This allows the calling code to handle the error appropriately.

**Exporting the Function:**

- `module.exports = sendEmail;`: This line exports the `sendEmail` function using `module.exports`. This makes the function available for use in other parts of your Node.js application by importing it using `require`.

By combining these functionalities, you can create a reusable function to send emails from your Node.js application using Nodemailer and Gmail. Remember to replace the redacted password with your actual Gmail credentials and ensure proper security measures are in place.
